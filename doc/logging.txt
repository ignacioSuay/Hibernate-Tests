Logging
==========

The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks (e.g. java.util.logging, logback, log4j) allowing the end user to plug in the desired logging framework at deployment time.

Logback is a successor of log4j, it is faster and simpler.

Java.util.logging (JUL) is the slowest one.

Log levels: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF.

The logger context is the name of the logger which usually is package.class. This way we can arrange loggers as a tree and define the levels for a specific package. e.g. <logger name="javax.activation" level="WARN"/>

Appender: is an output destination, could be a file, a server or a database, JMS.

layout: format of the output of the log.



Configuration
==============

the very basic structure of the configuration file can be described as:
 <configuration> element:
    containing zero or more <appender> elements,
    followed by zero or more <logger> elements,
    followed by at most one <root> element


Configuration tag
------------------
<configuration scan="true"> -> the scan= true, will make to scan for changes in the logback.xml file every minute and update the configuration.
You can change the time of scanning by adding scanPeriod. <configuration scan="true" scanPeriod="30 seconds" >

Appenders
-----------

The appender will admit 2 attributes name (id of the appender) and class (the fully qualified name of the appender class to instantiate, e.g. ch.qos.logback.classic.AsyncAppender)

The appender could contain:
 contain zero or one <layout> elements,
 zero or more <encoder> elements and
 zero or more <filter> elements

An example of creating an appender:
<appender name="FILE" class="ch.qos.logback.core.FileAppender">
    <file>myApp.log</file>
    <encoder>
      <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
    </encoder>
</appender>

and examples of using this appender:

<logger name="chapters.configuration">
    <appender-ref ref="FILE" />
</logger>

<root level="debug">
    <appender-ref ref="STDOUT" />
</root>

Logger
----------

Set the log level using hierarchies:

<logger name="org.wwarn.drugquality" level="@logback.loglevel@"/>
<logger name="javax.activation" level="WARN"/>
<logger name="javax.mail" level="WARN"/>

Root tag
----------
<root level="@logback.loglevel@">
        <appender-ref ref="CONSOLE"/>
</root>

The root will define the level for the root context, buy default the root level is set to Debug.

File location
--------------
when you deploy the application to tomcat the default location of the log file will be the the root of the tomcat folder.
You will need to make sure that your application has permission to write in the folder.
One solution is to add a folder to tomcat7/logs/ eg. tomcat7/logs/myapp and give tomcat permissions and ownership.

example:
<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/myapp/myapp.log</file>
        ....

that will set the log file in var/lib/tomcat7/logs/myapp/myapp.log
