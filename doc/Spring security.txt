Spring Security
================

* People use Spring Security for many reasons, but most are drawn to the project after finding the security features of
Java EE’s Servlet Specification or EJB Specification lack the depth required for typical enterprise application scenarios.
 Whilst mentioning these standards, it’s important to recognise that they are not portable at a WAR or EAR level.
 Therefore, if you switch server environments, it is typically a lot of work to reconfigure your application’s security
 in the new target environment. Using Spring Security overcomes these problems, and also brings you dozens of other useful,
 customisable security features.


Create a configuration class
-----------------------------
The configuration creates a Servlet Filter known as the springSecurityFilterChain which is responsible for all the security.

1. Add this Configuration and EnableWebSecurity to configure your security and extend WebSecurityConfigurerAdapter

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

When you add this configuration to your application that will make that:
- Require authentication to every URL in your application, all the data will need authenticatio now. That why usually you use ignore like:
@Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring()
            .antMatchers(HttpMethod.OPTIONS, "/**")
            .antMatchers("/app/**/*.{js,html}")
            .antMatchers("/bower_components/**")
            .antMatchers("/i18n/**")
            .antMatchers("/content/**")
            .antMatchers("/swagger-ui/index.html")
            .antMatchers("/test/**")
            .antMatchers("/h2-console/**");
    }

- Gives you CSRF attack prevention and Session Fixation protection
- Security Header integration
 HTTP Strict Transport Security for secure requests
 X-Content-Type-Options integration
 Cache Control (can be overridden later by your application to allow caching of your static resources)
 X-XSS-Protection integration
 X-Frame-Options integration to help prevent Clickjacking

-Integrate with the following Servlet API methods
 HttpServletRequest#getRemoteUser()
 HttpServletRequest.html#getUserPrincipal()
 HttpServletRequest.html#isUserInRole(java.lang.String)
 HttpServletRequest.html#login(java.lang.String, java.lang.String)
 HttpServletRequest.html#logout()


Adding http security
-----------------------

here is a basic example
 protected void configure(HttpSecurity http) throws Exception {
        http
        		.authorizeRequests()
        			.anyRequest().authenticated()  //we are saying that all the request to our app should be authenticated before;
        			.and()
        		.formLogin()  //Allows users to authenticate with form based login
        			.and()
        		.httpBasic(); //Allows users to authenticate with HTTP Basic authentication
 }


Form Login
-----------
.and()
            .formLogin()    //Allows users to authenticate with form based login
            .loginProcessingUrl("/api/authentication") //url log in form
            .usernameParameter("j_username") //name of the parameter in the form; if not added the default is username
            .passwordParameter("j_password") // name of the field in the form for password; if not added default is pasword
            .permitAll()    // permit all users to access the login form


Logout
----------
when youu add;

http
    .logout()

By default the url will be /logout, invalidates the HTTP Session, delets the rememerMe configuration. Clears SecurityContextHolder.
 .and()
             .logout()
             .logoutUrl("/api/logout")
             .logoutSuccessHandler(ajaxLogoutSuccessHandler)
             .deleteCookies("JSESSIONID", "CSRF-TOKEN")
             .permitAll()


Authentication
---------------

The method of how are you going to authenticate the users is in

    @Inject
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .userDetailsService(userDetailsService)
                .passwordEncoder(passwordEncoder());
    }

Use the userDetailsService for custom implementations.
The userDetailService is a custom bean which needs to implement the org.springframework.security.core.userdetails.UserDetailsService interface.
 This interface has only one method:
 UserDetails loadUserByUsername(String var1) throws UsernameNotFoundException.

 and you need to pass to the password encoder.

Enable Secured and Prepost authorize and Pre/post filter
----------------------------------------------------------
To enable secure and prepost you can do that in your security configuration with
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter

@Secured
---------
provides method security configuration. For instance:
    @RequestMapping(value = "/users",
        method = RequestMethod.PUT,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    @Transactional
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO) {}


@Secured vs @PreAuthorize
--------------------------
PreAuthorize can use Spring EL, so it is more powerful and can evaluate expressions.
@PreAuthorize("#contact.name == principal.name)"
public void doSomething(Contact contact)

@PreAuthorize vs @PostAuthorize
--------------------------------
PreAuthorize checks before running a method and post after.



Attacks
=========

Session Fixation Attack Protection
------------------------------------
A simple attack scenario[edit]
Straightforward scenario:

Mallory has determined that http://unsafe.example.com/ accepts any session identifier, accepts session identifiers from query strings and has no security validation. http://unsafe.example.com/ is thus not secure.
Mallory sends Alice an e-mail: "Hey, check this out, there is a cool new account summary feature on our bank, http://unsafe.example.com/?SID=I_WILL_KNOW_THE_SID". Mallory is trying to fixate the SID to I_WILL_KNOW_THE_SID.
Alice is interested and visits http://unsafe.example.com/?SID=I_WILL_KNOW_THE_SID. The usual log-on screen pops up, and Alice logs on.
Mallory visits http://unsafe.example.com/?SID=I_WILL_KNOW_THE_SID and now has unlimited access to Alice's account.

* Spring Security protects against this automatically by creating a new session or otherwise changing the session ID when a user logs in


CSRF - Cross site request forgery
----------------------------------

Cuando estas logeado en A y un cabron te hace clickar un enlace en otro sitio pero el enlace lleva un http request a A.

Way Spring security solves the problem: use of Synchronizer Token Pattern:
This solution is to ensure that each request requires, in addition to our session cookie, a randomly generated token as an HTTP parameter. When a request is submitted, the server must look up the expected value for the parameter and compare it against the actual value in the request. If the values do not match, the request should fail.


The way it works is the first time that there is a request from the client to the server, the server will create a token. All it wants is a token sent to it in a header called “X-CSRF”.
*The value of the CSRF token was available server side in the HttpRequest attributes from the initial request that loaded the home page
* Spring put the CSRF token in session attribute "_csrf"

Then to be able to work with angular you need to create a cookie with the token and that will be it. have a look to CsrfCookieGeneratorFilter.



